name: linux
on: push
  # The build name to use instead of "custom_build"
env:
  # This helps people identify where the build comes from
  BUILD_NAME: calinou
  # The number of CPU threads to use for compiling Godot
  BUILD_THREADS: "1"
  # SCons build flags to use for all platforms
  SCONS_FLAGS: '("progress=no" "warnings=no" "werror=no" "-j$BUILD_THREADS")'
  # The Godot Git repository clone URL
  GODOT_REPO_URL: https://github.com/godotengine/godot.git
  # The Godot Git repository clone branch
  GODOT_REPO_BRANCH: master
  DEBIAN_FRONTEND: noninteractive
jobs:
# Currently web (javascript) not supported | If you can add this then do open an pr
 # Web:
  #  runs-on: ubuntu-latest
   # steps:
    #  - name: Checkout
     #   uses: actions/checkout@v2
      
      #- name: Experiment
       # uses: actions/checkout@v2 
      #- run: |
        #  sudo apt-get install -qqq git cmake zip unzip build-essential pkg-config \
    #                            libx11-dev libxcursor-dev libxinerama-dev libgl1-mesa-dev libcairo2 \
   #                             libglu-dev libasound2-dev libpulse-dev libfreetype6-dev \
  #                              libssl-dev libudev-dev libxrandr-dev libxi-dev curl \
     #                           gcc-9 g++-9 python3-pip clang
         # sudo apt-get install build-essential scons pkg-config libx11-dev libxcursor-dev libxinerama-dev \
 #                               libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev libudev-dev libxi-dev libxrandr-dev yasm
#
      #    pip3 install --user scons
       #   sed -i "s:#! /usr/bin/env python:#! /usr/bin/python3:" "$HOME/.local/bin/scons"
        #  git clone https://github.com/emscripten-core/emsdk.git
         # cd emsdk
          #./emsdk install latest
          #./emsdk activate latest
          #source ./emsdk_env.sh
          #cd ..
          #git clone --depth 1 --branch master https://github.com/godotengine/godot.git
          #cd godot
          
          #scons platform=javascript tools=yes threads_enabled=yes target=release_debug
          #zip -r web_bin.zip bin
          #curl bashupload.com -T web_bin.zip

          
          #mv bin/godot.javascript.opt.zip bin/webassembly_release.zip
          #mv bin/godot.javascript.opt.debug.zip bin/webassembly_debug.zip
          #scons platform=javascript tools=no threads_enabled=yes target=release_debug
          #scons platform=javascript tools=no gdnative_enabled=yes target=release_debug
          #mv bin/godot.javascript.opt.gdnative.zip bin/webassembly_gdnative_release.zip
          #mv bin/godot.javascript.opt.debug.gdnative.zip bin/webassembly_gdnative_debug.zip
          #scons platform=javascript tools=yes threads_enabled=yes target=release_debug
          #zip -r web_binaries.zip bin
          #curl bashupload.com -T web_binaries.zip
  Explore-GitHub-Actions:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Experiment
        uses: actions/checkout@v2 
      - run: |
              sudo apt-get install -qqq git cmake zip unzip build-essential pkg-config \
                            libx11-dev libxcursor-dev libxinerama-dev libgl1-mesa-dev libcairo2 \
                            libglu-dev libasound2-dev libpulse-dev libfreetype6-dev \
                            libssl-dev libudev-dev libxrandr-dev libxi-dev curl \
                            gcc-9 g++-9 python3-pip clang
              sudo apt-get install build-essential scons pkg-config libx11-dev libxcursor-dev libxinerama-dev \
                            libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev libudev-dev libxi-dev libxrandr-dev yasm

              pip3 install --user scons
              sed -i "s:#! /usr/bin/env python:#! /usr/bin/python3:" "$HOME/.local/bin/scons"
              
              git clone https://github.com/godotengine/godot.git 
              cd godot
              scons platform=linuxbsd tools=yes target=release_debug debug_symbols=no use_llvm=yes 

              ls -la
              zip -r godot_binaries.zip bin
              curl bashupload.com -T godot_binaries.zip
              cd bin
              git clone https://github.com/stupid-kid-af/appimage
              cd appimage
              mkdir usr
              mkdir usr/bin
              cd ..
              mv godot.linuxbsd.opt.tools.64.llvm appimage/usr/bin/
            
              wget https://github.com/AppImage/AppImageKit/releases/download/13/appimagetool-x86_64.AppImage
              sudo chmod +x appimagetool-x86_64.AppImage
              ARCH=x86_64 ./appimagetool-x86_64.AppImage appimage
              curl bashupload.com -T Godot-x86_64.AppImage
              
  # Ensure SCons uses Python 3 by replacing the shebang. tools=yes
      - name: Create GitHub release
        id: create-new-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
      - name: DIr
        run: cd godot && ls -la
      - name: Upload release asset
       
        uses: actions/upload-release-asset@v1
        env:
            GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
            upload_url: ${{ steps.create-new-release.outputs.upload_url }}
            asset_path: godot/godot_binaries.zip
            asset_name: godot_binaries-times${{ github.run_number }}.zip
            asset_content_type: application/zip   
      - name: Upload release asset
       
        uses: actions/upload-release-asset@v1
        env:
            GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
            upload_url: ${{ steps.create-new-release.outputs.upload_url }}
            asset_path: godot/bin/Godot-x86_64.AppImage
            asset_name: Godot-dev-x86_64-${{ github.run_number }}.AppImage
            asset_content_type: application/AppImage


          
          
    #pwd
     #ls -la
      #chmod +x scripts/gitlab-ci/before_script.sh
      #bash scripts/gitlab-ci/before_script.sh
             #chmod +x scripts/gitlab-ci/build/linux_editor.sh
        #     bash scripts/gitlab-ci/build/linux_editor.sh
         #    chmod +x scripts/gitlab-ci/build/linux_templates.sh
        #     bash scripts/gitlab-ci/build/linux_templates.sh debug
        #     bash scripts/gitlab-ci/build/linux_templates.sh release

   #   - run: ls && pwd  && cd scripts
      #- run: /scripts/gitlab-ci/before_script.sh
    #  - run: ls
    #  - run: cd scripts
   #   - run: "$CI_PROJECT_DIR/scripts/gitlab-ci/build/linux_editor.sh" 
   #   - run: "$CI_PROJECT_DIR/scripts/gitlab-ci/build/linux_templates.sh debug"
  #    - run: "$CI_PROJECT_DIR/scripts/gitlab-ci/build/linux_templates.sh release"


